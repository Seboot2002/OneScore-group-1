<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="app.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="0"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1517"/><column_width id="4" width="0"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="Album" custom_title="0" dock_id="1" table="4,5:mainAlbum"/><dock_state state="000000ff00000000fd00000001000000020000000000000000fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000ffffffff0000010100ffffff000000000000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings/></tab_browse><tab_sql><sql name="SQL 1">-- Create Users table
CREATE TABLE User (
    user_id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    nickname TEXT UNIQUE NOT NULL,
    mail TEXT UNIQUE NOT NULL,
    password TEXT NOT NULL
);

-- Create Genre table
CREATE TABLE Genre (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE
);

-- Create Artist table
CREATE TABLE Artist (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    genre_id INTEGER NOT NULL,
    picture_url TEXT,
    debut_year INTEGER,
    FOREIGN KEY (genre_id) REFERENCES Genre(id)
);

-- Create Album table
CREATE TABLE Album (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    release_year INTEGER NOT NULL,
    genre_id INTEGER NOT NULL,
    cover_url TEXT,
    artist_id INTEGER NOT NULL,
    FOREIGN KEY (genre_id) REFERENCES Genre(id),
    FOREIGN KEY (artist_id) REFERENCES Artist(id)
);

-- Create Song table
CREATE TABLE Song (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    n_track INTEGER NOT NULL,
    album_id INTEGER NOT NULL,
    FOREIGN KEY (album_id) REFERENCES Album(id)
);

-- Create Artist_User junction table
CREATE TABLE Artist_User (
    user_id INTEGER NOT NULL,
    artist_id INTEGER NOT NULL,
    PRIMARY KEY (user_id, artist_id),
    FOREIGN KEY (user_id) REFERENCES User(user_id),
    FOREIGN KEY (artist_id) REFERENCES Artist(id)
);

-- Create Album_User junction table
CREATE TABLE Album_User (
    user_id INTEGER NOT NULL,
    album_id INTEGER NOT NULL,
    rank_date DATE,
    rank_state TEXT CHECK(rank_state IN ('Valorado', 'Por valorar')),
    PRIMARY KEY (user_id, album_id),
    FOREIGN KEY (user_id) REFERENCES User(user_id),
    FOREIGN KEY (album_id) REFERENCES Album(id)
);

-- Create Song_User junction table
CREATE TABLE Song_User (
    user_id INTEGER NOT NULL,
    song_id INTEGER NOT NULL,
    score INTEGER CHECK(score &gt;= 1 AND score &lt;= 10),
    PRIMARY KEY (user_id, song_id),
    FOREIGN KEY (user_id) REFERENCES User(user_id),
    FOREIGN KEY (song_id) REFERENCES Song(id)
);</sql><current_tab id="0"/></tab_sql></sqlb_project>
